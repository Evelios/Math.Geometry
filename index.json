[{"uri":"/fsharp-geometry/point.html","title":"2D Points","content":"(**\n\n---\ntitle: 2D Points\ncategory: 2D Modules\ncategoryindex: 3\nindex: 9\n---\n\n\n*)\n(*** hide ***)\n\n#r \u0022../Geometry/bin/Debug/net6.0/Geometry.dll\u0022\nopen Geometry\n(***)\n\n(**\n# Constructors\n\nPoints can be created from the __x__ and __y__ components.\n*)\n\nPoint2D.xy (Length.meters 3.) (Length.meters 4.)\n\n(**\nYou can use either \u0060rTheta\u0060 or \u0060polar\u0060 when using polar coordinates.\n*)\nPoint2D.rTheta (Length.meters 5.) Angle.halfPi\n\nPoint2D.polar (Length.meters 5.) Angle.halfPi\n\n\n\n(**\n# Operators\n\nOperators are provided for more concise syntax when dealing with points. All\nof these symbol operators have a corresponding function that you can use as\nwell. These are often used when using functions like \u0060List.map\u0060 or when used\nin piping operations (\u0060|\u003E\u0060). Pay attention to the order of the arguments!\nBecause these functions are intended to be used in pipes the order goes like\n\u0060Point2D.add rhs lhs\u0060.\n*)\n\n\n(*** hide ***)\ntype Cartesian = Cartesian\n\nlet point : Point2D\u003CMeters, Cartesian\u003E = Point2D.meters 3. 4.\nlet secondPoint : Point2D\u003CMeters, Cartesian\u003E = Point2D.meters 8. 16.\nlet vec : Vector2D\u003CMeters, Cartesian\u003E = Vector2D.meters 5. 12.\n\n(**\nThe following three statements are equivalent.\n$$ Point2D \u002B Point2D = Point2D $$\n*)\nPoint2D.translate vec point\n\npoint |\u003E Point2D.plus vec\n\npoint \u002B vec\n(*** include-it ***)\n\n\n(** $$ Point2D - Vector2D = Point2D $$ *)\npoint - vec\n(*** include-it ***)\n\n\n(** $$ Point2D - Point2D = Vector2D $$ *)\n(secondPoint - point) = vec\n(*** include-it ***)\n(**\n\nThe following table is the complete list of operators that can be used on\npoint objects.\n\n| Operator | Lhs    | Rhs    | Return Type | Example     | Function |\n|----------|--------|--------|-------------|-------------|----------|\n| -        | Point  |        | Point      | \u0060-vec\u0060      | \u0060Point2D.neg\u0060 |\n| \u002B        | Point  | Point  | Point      | \u0060lhs \u002B rhs\u0060 | \u0060Point2D.plus\u0060 |\n| -        | Point  | Point  | Point      | \u0060lhs - rhs\u0060 | \u0060Point2D.minus\u0060 |\n| *        | Point  | float  | Point      | \u0060lhs * 0.5\u0060 | \u0060Point2D.times\u0060 \u0026 \u0060Point2D.scaleBy\u0060 |\n| *        | float  | Point  | Point      | \u00600.5 * rhs\u0060 | \u0060None\u0060 |\n| /        | Point  | float  | Point      | \u0060lhs / 4.\u0060  | \u0060Point2D.dividedBy\u0060 |\n\n*)\n"},{"uri":"/fsharp-geometry/bounding-box.html","title":"2D Bounding Box","content":"(**\n\n---\ntitle: 2D Bounding Box\ncategory: 2D Modules\ncategoryindex: 3\nindex: 3\n---\n\n\n*)\n(*** hide ***)\n\n#r \u0022../Geometry/bin/Debug/net6.0/Geometry.dll\u0022\nopen Geometry\ntype Cartesian = Cartesian\n(***)"},{"uri":"/fsharp-geometry/interval.html","title":"Interval","content":"(**\n---\ntitle: Interval\ncategory: Modules\ncategoryindex: 2\nindex: 3\n---\n*)\n(*** hide ***)\n\n#r \u0022../Geometry/bin/Debug/net6.0/Geometry.dll\u0022\n\nopen Geometry\nopen System\n\ntype Cartesian = Cartesian\n(***)"},{"uri":"/fsharp-geometry/polyline.html","title":"2D Poly-Line","content":"(**\n\n---\ntitle: 2D Poly-Line\ncategory: 2D Modules\ncategoryindex: 3\nindex: 11\n---\n\n\n*)\n(*** hide ***)\n\n#r \u0022../Geometry/bin/Debug/net6.0/Geometry.dll\u0022\nopen Geometry\ntype Cartesian = Cartesian\n(***)"},{"uri":"/fsharp-geometry/arc.html","title":"2D Arc","content":"(**\n\n---\ntitle: 2D Arc\ncategory: 2D Modules\ncategoryindex: 3\nindex: 1\n---\n\n# Arc 2D\n\n*)\n(*** hide ***)\n\n#r \u0022../Geometry/bin/Debug/net6.0/Geometry.dll\u0022\nopen Geometry\ntype Cartesian = Cartesian\n(***)\n\n(**\n# Builders\n*)\n\nArc2D.from\n    (Point2D.meters 1. 3.)\n    (Point2D.meters 5. 7.)\n    (Angle.degrees 30.)\n    \n(***)\n\nArc2D.withCenterPoint\n    (Point2D.meters 5. 5.)\n    (Length.meters 3.)\n    (Angle.degrees 30.)\n    (Angle.degrees 120.)\n\n(***)\n\nArc2D.sweptAround\n    (Point2D.meters 0. 0.)\n    (Angle.degrees 180.)\n    (Point2D.meters 5. 0.)\n\n(***)\n\nArc2D.throughPoints\n    (Point2D.meters 5. 0.)\n    (Point2D.meters 3. 0.)\n    (Point2D.meters -5. 0.)\n\n(***)\n\nArc2D.withRadius\n    (Length.meters 5.)\n    SweptAngle.largePositive\n    (Point2D.meters 5. 0.)\n    (Point2D.meters -5. 0.)\n    \n(***)\n\nArc2D.withSweptAngle\n    (Point2D.meters 0. 0.)\n    (Length.meters 5.)\n    Angle.zero\n    (Angle.degrees 180.)\n\n(***)\n\n(**\n# Accessors\n\nFor showing what the different accessors will return, the following arc will be used.\n*)\n\nlet arc: Arc2D\u003CMeters, Cartesian\u003E = \n    Arc2D.from\n        (Point2D.meters 1. 3.)\n        (Point2D.meters 5. 7.)\n        (Angle.degrees 30.)\n        \n(***)\n\nArc2D.centerPoint arc\n(*** include-it ***)\n\nArc2D.radius arc\n(*** include-it ***)\n\nArc2D.sweptAngle arc\n(*** include-it ***)\n\nArc2D.pointOn arc 0.3\n(*** include-it ***)\n\nArc2D.startPoint arc\n(*** include-it ***)\n\nArc2D.midpoint arc\n(*** include-it ***)\n\nArc2D.endPoint arc\n(*** include-it ***)\n\n\nArc2D.boundingBox arc\n(*** include-it ***)\n\nArc2D.firstDerivative arc 0.8 \n(*** include-it ***)\n\n\n(**\n# Modifiers\n*)\n\nArc2D.reverse\nArc2D.scaleAbout\nArc2D.rotateAround\nArc2D.translateBy\nArc2D.translateIn\nArc2D.mirrorAcross\nArc2D.relativeTo\nArc2D.placeIn\n\n(**\n# Non-Degenerative\n*)\n\n(*** hide ***)\nlet nondegenerate = arc\n\n(***)\n\nArc2D.nondegenerate arc\n(*** include-it ***)\n\nArc2D.fromNondegenerate nondegenerate\n\n(***)\n\nArc2D.tangentDirection nondegenerate 0.2\n(*** include-it ***)\n\nArc2D.sample nondegenerate 0.4\n(*** include-it ***)"},{"uri":"/fsharp-geometry/size.html","title":"2D Size","content":"(**\n\n---\ntitle: 2D Size\ncategory: 2D Modules\ncategoryindex: 3\nindex: 12\n---\n\n\n*)\n(*** hide ***)\n\n#r \u0022../Geometry/bin/Debug/net6.0/Geometry.dll\u0022\nopen Geometry\ntype Cartesian = Cartesian\n(***)"},{"uri":"/fsharp-geometry/angle.html","title":"Angle","content":"(**\n---\ntitle: Angle\ncategory: Modules\ncategoryindex: 2\nindex: 1\n---\n*)\n(*** hide ***)\n\n#r \u0022../Geometry/bin/Debug/net6.0/Geometry.dll\u0022\n\nopen Geometry\nopen System\n\ntype Cartesian = Cartesian\n(***)\n\n(**\n# Builders\n*)\n\nAngle.degrees 120.\n\nAngle.radians (Math.PI / 3.)\n\n(**\n# Accessors\n*)\n\nAngle.inDegrees Angle.halfPi\n\nAngle.inRadians Angle.halfPi\n\n(**\n# Trigonometry\n*)\n\nAngle.sin Angle.pi\nAngle.cos Angle.pi\nAngle.tan Angle.pi\n\nAngle.asin (1. / 2.)\nAngle.acos (1. / 2.)\nAngle.atan (1. / 2.)\n\n(**\n# Constants\n\n| Function                 | Value               |\n|--------------------------|---------------------|\n| \u0060Angle.zero\u0060             | 0                   |\n| \u0060Angle.pi\u0060               | $ \\pi $             |\n| \u0060Angle.twoPi\u0060            | $ 2 \\pi $           |\n| \u0060Angle.piOverTwo\u0060        | $ \\frac{\\pi}{2} $   |\n| \u0060Angle.halfPi\u0060           | $ \\frac{\\pi}{2} $   |\n| \u0060Angle.radiansToDegrees\u0060 | $ \\frac{180}{\\pi} $ |\n| \u0060Angle.degreesToRadians\u0060 | $ \\frac{\\pi}{180} $ |\n\n*)\n\n(**\n# Operators\n\n| Operator | Lhs    | Rhs    | Return Type | Example          | Function |\n|----------|--------|--------|-------------|------------------|----------|\n| -        | Angle  |        | Angle       | \u0060-length\u0060        | \u0060Angle.neg\u0060 |\n| \u002B        | Angle  | Angle  | Angle       | \u0060lhs \u002B rhs\u0060      | \u0060Angle.plus\u0060 |\n| -        | Angle  | Angle  | Angle       | \u0060lhs - rhs\u0060      | \u0060Angle.minus\u0060 |\n| *        | Angle  | float  | Angle       | \u0060lhs * 0.5\u0060      | \u0060Angle.times\u0060 |\n| *        | float  | Angle  | Angle       | \u00600.5 * rhs\u0060      | None |\n| *        | Angle  | Length | Length      | \u0060angle / length\u0060 | None |\n| *        | Length | Angle  | Length      | \u0060length / angle\u0060 | None |\n| /        | Angle  | float  | Angle       | \u0060lhs / 4.\u0060       | \u0060Angle.dividedBy\u0060 |\n| /        | Angle  | Angle  | float       | \u0060lhs / rhs\u0060      | None |\n| /        | Angle  | Length | Length      | \u0060angle / length\u0060 | None |\n| /        | Length | Angle  | Length      | \u0060length / angle\u0060 | None |\n*)"},{"uri":"/fsharp-geometry/length.html","title":"Lengths","content":"(**\n\n---\ntitle: Lengths\ncategory: Modules\ncategoryindex: 2\nindex: 2\n---\n\n[digit precision]: digit-precision.html\n\n*)\n(*** hide ***)\n\n#r \u0022../Geometry/bin/Debug/net6.0/Geometry.dll\u0022\nopen Geometry\n\n(***)\n\n(*** hide ***)\ntype Cartesian = Cartesian\n\n(**\n\n# Builders and Accessors (Units)\n\n| Builder                  | Accessor                   | Length                                    |\n|--------------------------|----------------------------|-------------------------------------------|\n| __Metric__               |                            |                                           |\n| Length.angstroms         | Length.inAngstroms         | $$ 1 * 10^{-10} \\, Meters $$              |\n| Length.nanometers        | Length.inNanometers        | $$ 1 * 10^9 \\, Meters $$                  |\n| Length.microns           | Length.inMicrons           | $$ 1 * 10^{-6} \\, Meters $$               |\n| Length.millimeters       | Length.inMillimeters       | $$ 0.001 \\, Meters $$                     |\n| Length.centimeters       | Length.inCentimeters       | $$ 0.01 \\, Meters $$                      |\n| Length.kilometers        | Length.inKilometers        | $$ 1000 \\, Meters $$                      |\n| __Imperial__             |                            |                                           |\n| Length.inch              | Length.inInches            | $$ 0.0254 \\, Meters $$                    |\n| Length.feet              | Length.inFeet              | $$ 12 \\, Inches $$                        |\n| Length.yards             | Length.inYards             | $$ 3 \\, Feet $$                           |\n| Length.thou              | Length.inThou              | $$ 0.001 \\, Inches $$                     |\n| Length.miles             | Length.inMiles             | $$ 5280 \\, Feet $$                        |\n| __Astronomical Units__   |                            |                                           |\n| Length.astronomicalUnits | Length.inAstronomicalUnits | $$ \\approx 1.50 * 10^{11} \\, Meters $$    |\n| Length.lightYears        | Length.inLightYears        | $$ \\approx 9.46 * 10^{15} \\, Meters $$    |\n| Length.parsecs           | Length.inParsecs           | $$ 648000 \\pi \\, Astronomical \\, Units $$ |\n| __Digital__              |                            |                                           |\n| Length.cssPixels         | Length.inCssPixels         | $$ \\frac{1}{96} \\, Inches $$              |\n| Length.points            | Length.inPoints            | $$ \\frac{1}{72} \\, Inches $$              |\n| Length.picas             | Length.inPicas             | $$ \\frac{1}{6} \\, Inches $$               |\n\n*)\n\n(**\n# Operators\n\n| Operator | Lhs    | Rhs    | Return Type | Example           | Function |\n|----------|--------|--------|-------------|-------------      |----------|\n| -        | Length |        | Length      | \u0060-length\u0060         | \u0060Length2D.neg\u0060 |\n| \u002B        | Length | Length | Length      | \u0060lhs \u002B rhs\u0060       | \u0060Length2D.plus\u0060 |\n| -        | Length | Length | Length      | \u0060lhs - rhs\u0060       | \u0060Length2D.minus\u0060 |\n| *        | Length | float  | Length      | \u0060lhs * 0.5\u0060       | \u0060Length2D.times\u0060 |\n| *        | float  | Length | Length      | \u00600.5 * rhs\u0060       | None |\n| *        | Angle  | Length | Length      | \u0060angle / length\u0060  | None |\n| *        | Length | Angle  | Length      | \u0060length / angle\u0060  | None |\n| /        | Length | float  | Length      | \u0060lhs / 4.\u0060        | \u0060Length2D.dividedBy\u0060 |\n| /        | Angle  | Length | Length      | \u0060angle / length\u0060  | None |\n| /        | Length | Angle  | Length      | \u0060length / angle\u0060  | None |\n*)\n\n(**\n## Examples\n\n*)\n\nlet vec1 : Vector2D\u003CMeters, Cartesian\u003E = Vector2D.meters 10. 20.\n\nlet vec2 : Vector2D\u003CMeters, Cartesian\u003E = Vector2D.meters 30. 40.\n\n(***)\n\n-vec1\n(*** include-it ***)\n\nvec1 \u002B vec2\n(*** include-it ***)\n\nvec1 - vec2\n(*** include-it ***)\n\nvec1 * 2.\n// Or\n2. * vec1\n(*** include-it ***)\n\nvec1 / 2.\n(*** include-it ***)\n\n(**\n# Math\n*)\n\nlet length = Length.meters 10.\n\nLength.squared length\n(*** include-it ***)\n\nlet lengthSquared = Length.meters 3. * Length.meters 12.\n\nLength.sqrt lengthSquared\n(*** include-it ***)\n\nLength.twice length = 2. * length\n\nLength.half length = 0.5 * length\nLength.half length = length / 2.\n\n(** Round to the nearest 10th digit. You can read more about [digit precision] *)\n\nLength.round (Length.meters 0.123456789123456789)\n(*** include-it ***)\n\nLength.roundTo 3 (Length.meters 0.11111)\n(*** include-it ***)\n\nLength.min (Length.meters 3.) (Length.meters 4.)\n(*** include-it ***)\n\nLength.max (Length.meters 3.) (Length.meters 4.)\n(*** include-it ***)\n\nLength.sum [ Length.meters 1.; Length.meters 2. ]\n(*** include-it ***)\n\n\n(**\n# Unsafe Operations\n*)\n\nLength.unpack (Length.meters 5.)\n(*** include-it ***)"},{"uri":"/fsharp-geometry/triangle.html","title":"2D Triangle","content":"(**\n\n---\ntitle: 2D Triangle\ncategory: 2D Modules\ncategoryindex: 3\nindex: 13\n---\n\n\n*)\n(*** hide ***)\n\n#r \u0022../Geometry/bin/Debug/net6.0/Geometry.dll\u0022\nopen Geometry\ntype Cartesian = Cartesian\n(***)"},{"uri":"/fsharp-geometry/frame.html","title":"2D Frame","content":"(**\n\n---\ntitle: 2D Frame\ncategory: 2D Modules\ncategoryindex: 3\nindex: 7\n---\n\n\n*)\n(*** hide ***)\n\n#r \u0022../Geometry/bin/Debug/net6.0/Geometry.dll\u0022\nopen Geometry\ntype Cartesian = Cartesian\n(***)"},{"uri":"/fsharp-geometry/vector.html","title":"2D Vectors","content":"(**\n\n---\ntitle: 2D Vectors\ncategory: 2D Modules\ncategoryindex: 3\nindex: 14\n---\n\n\n*)\n(*** hide ***)\n\n#r \u0022../Geometry/bin/Debug/net6.0/Geometry.dll\u0022\nopen Geometry\ntype Cartesian = Cartesian\n(***)\n\n(**\n# Constructors\n\nVectors can be created from the __x__ and __y__ components.\n*)\n\nVector2D.xy (Length.meters 3.) (Length.meters 4.)\n\n(**\nYou can also create a vector in polar coordinates.\n*)\nVector2D.rTheta (Length.meters 5.) Angle.halfPi\n\n(**\nUsing a vector __direction__ you can create a vector of a given length following that direction.\n*)\nVector2D.withLength (Length.meters 5.) (Direction2D.fromAngle Angle.halfPi)\n\n(** # Accessors *)\n\nlet vec : Vector2D\u003CMeters, Cartesian\u003E =\n    Vector2D.xy (Length.meters 3.) (Length.meters 4.)\n\nvec.X = Vector2D.x vec\nvec.Y = Vector2D.y vec\n\n(***)\n\nVector2D.magnitude vec\n(*** include-it ***)\n\n(**\n# Operators\n\nOperators are provided for more concise syntax when dealing with vectors. All\nof these symbol operators have a corresponding function that you can use as\nwell. These are often used when using functions like \u0060List.map\u0060 or when used\nin piping operations (\u0060|\u003E\u0060). Pay attention to the order of the arguments!\nBecause these functions are intended to be used in pipes the order goes like\n\u0060Vector2D.add rhs lhs\u0060.\n*)\n\n\n(*** hide ***)\nlet lhs : Vector2D\u003CMeters, Cartesian\u003E = Vector2D.meters 3. 4.\n\nlet rhs : Vector2D\u003CMeters, Cartesian\u003E = Vector2D.meters 5. 12.\n(***)\n\nlhs |\u003E Vector2D.plus rhs = lhs \u002B rhs\n(*** include-it ***)\n(**\n\nThe following table is the complete list of operators that can be used on\nvector objects.\n\n| Operator | Lhs    | Rhs    | Return Type | Example     | Function |\n|----------|--------|--------|-------------|-------------|----------|\n| -        | Vector |        | Vector      | \u0060-vec\u0060      | \u0060Vector2D.neg\u0060 |\n| \u002B        | Vector | Vector | Vector      | \u0060lhs \u002B rhs\u0060 | \u0060Vector2D.plus\u0060 |\n| -        | Vector | Vector | Vector      | \u0060lhs - rhs\u0060 | \u0060Vector2D.minus\u0060 |\n| *        | Vector | float  | Vector      | \u0060lhs * 0.5\u0060 | \u0060Vector2D.times\u0060 \u0026 \u0060Vector2D.scaleBy\u0060 |\n| *        | float  | Vector | Vector      | \u00600.5 * rhs\u0060 | \u0060None\u0060 |\n| /        | Vector | float  | Vector      | \u0060lhs / 4.\u0060  | \u0060Vector2D.dividedBy\u0060 |\n*)\n\n(** # Trigonometry *)\n\n(** $$ lhs \\cdot rhs $$ *)\nVector2D.dot lhs rhs\n(*** include-it ***)\n\n(** $$ lhs \\times rhs $$ *)\nVector2D.cross lhs rhs\n(*** include-it ***)"},{"uri":"/fsharp-geometry/digit-precision.html","title":"Digit Precision","content":"(**\n\n---\ntitle: Digit Precision\ncategory: Tutorials\ncategoryindex: 1\nindex: 1\n---\n\n[floating point equality]: https://floating-point-gui.de/errors/comparison/\n[f# float]: https://docs.microsoft.com/en-us/dotnet/api/system.double?view=net-6.0\n\n*)\n(*** hide ***)\n#r \u0022../Geometry/bin/Debug/net6.0/Geometry.dll\u0022\nopen Geometry\ntype Cartesian = Cartesian\n\n(**\n# Digit Precision\n\nThis library provides equality operators \u0060lhs = rhs\u0060 for many of the data\nstructures. The savvy among you may have noticed that all the data structures\nare also storing float numbers. Comparing [floating point equality] is no easy\ntask. Due to floating point rounding errors when numbers are being stored, and\nwith many calculations (especially trig functions), the output numbers may be\nslightly different than you would expect.\n\nWe can show this with an example. We would expect the following to be true\n*)\n\n1. = (0.3 * 3.) \u002B 0.1\n(*** include-it ***)\n\n(**\nChecking the returned value from the right hand side we see that we are getting\nthe value \u00601.0\u0060. So what\u0027s going on?\n*)\n\n(0.3 * 3.) \u002B 0.1\n(*** include-it ***)\n\n(**\nWell, with a little investigation, we can see that we aren\u0027t getting exactly\n\u00601.0\u0060. We are getting ever so slightly less than \u00601.0\u0060.\n*)\n\n((0.3 * 3.) \u002B 0.1) - 1.\n(*** include-it ***)\n\n(**\nComparing datastructures that use floating point numbers can sometimes be a sign\nof bad code code design, but this is not always the case. So when you are\nlooking to do equality comparison, this library provides the ability to do\napproximate equality comparison on floating point numbers and data structures\nlike points and vectors.\n*)\n\nFloat.almostEqual 1. ((0.3 * 3.) \u002B 0.1)\n(*** include-it ***)\n\n(**\nYou can change the precision that floating point operations are performed at. The\ndefault precision is a digit precision of 10. If we were looking a higher level\nof precision, you can change the digit precision to be something more fitting of\nyour needs. In this example, we can make that equality check fail by increasing\nthe precision we are requiring for this operation.\n*)\n\n// Increasing the equality precision to make this check fail\nFloat.DigitPrecision \u003C- 17\n\nFloat.almostEqual 1. ((0.3 * 3.) \u002B 0.1)\n(*** include-it ***)\n\n(**\n# Examples\n*)\n\nPoint2D.meters 1. 5. = Point2D.meters 1. (5. \u002B 1.e-20)\n(*** include-it ***)"},{"uri":"/fsharp-geometry/line-segment.html","title":"2D Line Segment","content":"(**\n\n---\ntitle: 2D Line Segment\ncategory: 2D Modules\ncategoryindex: 3\nindex: 8\n---\n\n\n*)\n(*** hide ***)\n\n#r \u0022../Geometry/bin/Debug/net6.0/Geometry.dll\u0022\nopen Geometry\ntype Cartesian = Cartesian\n(***)"},{"uri":"/fsharp-geometry/axes.html","title":"2D Axes","content":"(**\n\n---\ntitle: 2D Axes\ncategory: 2D Modules\ncategoryindex: 3\nindex: 2\n---\n\n\n*)\n(*** hide ***)\n\n#r \u0022../Geometry/bin/Debug/net6.0/Geometry.dll\u0022\nopen Geometry\ntype Cartesian = Cartesian\n(***)"},{"uri":"/fsharp-geometry/index.html","title":"FSharp Geometry Package","content":"(**\n\n---\ntitle: FSharp Geometry Package\n---\n\nThis package is intended to be a port and extension of the framework [elm-geometry](https://package.elm-lang.org/packages/ianmackenzie/elm-geometry/latest/).\nIt focuses on providing as many interfaces for geometric objects an manipulation in a way that is type safe and\nconvenient.\n\nThis framework is currently in alpha development and is currently working on building out 2D development and\nfunctionality first before moving to expand into 3D objects.\n\n*)\n(*** hide ***)\n\n#r \u0022../Geometry/bin/Debug/net6.0/Geometry.dll\u0022\n(** *)\n\n(**\nTo use this framework you include the package through the namespace\n*)\nopen Geometry\n\n(**\nYou can then create a variety of geometric objects like points, vectors, angles, ...\n*)\n\nPoint2D.pixels 100. 200.\n\nVector2D.meters 4. 4.\n\nAngle.degrees 30.\n(**\n\n# Overview\n| Tutorial | Api |\n|----------|-----|\n| [Vector](vector.html) | [2D](reference/geometry-vector2dmodule.html) |\n| [Point](point.html) | [2D](reference/geometry-point2dmodule.html) |\n| [Direction](direction.html) | [2D](reference/geometry-direction2dmodule.html) |\n| [Frame](frame.html) | [2D](reference/geometry-frame2dmodule.html) |\n| [Axes](axes.html) | [2D](reference/geometry-axes2dmodule.html) |\n| [Line Segment](line-segment.html) | [2D](reference/geometry-linesegment2dmodule.html) |\n| [Triangle](triangle.html) | [2D](reference/geometry-triangle2dmodule.html) |\n| [Circle](circle.html) | [2D](reference/geometry-circle2dmodule.html) |\n| [Ellipse](ellipse.html) | [2D](reference/geometry-ellipse2dmodule.html) |\n| [Arc](arc.html) | [2D](reference/geometry-arc2dmodule.html) |\n| [Polyline](polyline.html) | [2D](reference/geometry-polyline2dmodule.html) |\n| [Polygon](polygon.html) | [2D](reference/geometry-polygon2dmodule.html) |\n| [Size ](size.html) | [2D](reference/geometry-size2dmodule.html) |\n| [Bounding Box](bounding-box.html) | [2D](reference/geometry-boundingbox2dmodule.html) |\n\n*)"},{"uri":"/fsharp-geometry/polygon.html","title":"2D Polygon","content":"(**\n\n---\ntitle: 2D Polygon\ncategory: 2D Modules\ncategoryindex: 3\nindex: 10\n---\n\n\n*)\n(*** hide ***)\n\n#r \u0022../Geometry/bin/Debug/net6.0/Geometry.dll\u0022\nopen Geometry\ntype Cartesian = Cartesian\n(***)"},{"uri":"/fsharp-geometry/ellipse.html","title":"2D Ellipse","content":"(**\n\n---\ntitle: 2D Ellipse\ncategory: 2D Modules\ncategoryindex: 3\nindex: 6\n---\n\n\n*)\n(*** hide ***)\n\n#r \u0022../Geometry/bin/Debug/net6.0/Geometry.dll\u0022\nopen Geometry\ntype Cartesian = Cartesian\n(***)"},{"uri":"/fsharp-geometry/direction.html","title":"2D Direction","content":"(**\n\n---\ntitle: 2D Direction\ncategory: 2D Modules\ncategoryindex: 3\nindex: 5\n---\n\n\n*)\n(*** hide ***)\n\n#r \u0022../Geometry/bin/Debug/net6.0/Geometry.dll\u0022\nopen Geometry\n\ntype Cartesian = Cartesian\n(***)\n\n(**\n# Direction 2D\n\nA direction can be though of as a normalized vector or can be though of just something pointing in a particular\ndirection on the 2D cartesian plane. When looking at the type of a direction, you can notice that it doesn\u0027t have any\nunit type, \u0060Direction2D\u003C\u0027Coordinates\u003E\u0060. This is because a direction _always_ has a magnitude of 1 and doesn\u0027t need any\nunit qualifier.\n*)\n\n(** # Builders *)\n\n(**\n\u0060Direction2D.xy\u0060 first checks to make sure that the input components are both non-zero, then normalizes them to\nguarantee a valid direction is created.\n*)\n\nDirection2D.xy 3. 4.\n(***hide***)\nDirection2D.xy 3. 4.\n|\u003E Option.map Direction2D.toTuple\n(*** include-it ***)\n\n(**\nWhen both values are zero, a proper direction cannot be created, so the program returns a \u0060None\u0060 option.\n(Appears as \u0060\u003Cnull\u003E\u0060 in the terminal)\n*)\n\nDirection2D.xy 0. 0.\n(*** hide ***)\nDirection2D.xy 0. 0.\n|\u003E Option.map Direction2D.toTuple\n(*** include-it ***)\n\n(**\nYou can also create a direction using similar functionality to \u0060Direction2D.xy\u0060 but with _tuples_ as an input instead.\n*)\nDirection2D.fromComponents (3., 4.)\n(*** hide ***)\n\n\nDirection2D.positiveY |\u003E Direction2D.toAngle\n(*** include-it ***)\n\n(** # Constants *)\n\nDirection2D.positiveX\nDirection2D.x\n\nDirection2D.positiveY\nDirection2D.y\n\nDirection2D.negativeX\n\nDirection2D.negativeY\n\n(** # Accessors *)\n\n(*** hide ***)\nlet direction: Direction2D\u003CCartesian\u003E = Direction2D.xyUnsafe 1. 0.5\n\n(***)\n\nDirection2D.toAngle\nDirection2D.toTuple\n\nDirection2D.xComponent\ndirection.X\n\nDirection2D.yComponent\ndirection.Y\n\n\n(** # Modifiers *)\n\nDirection2D.reverse\nDirection2D.rotateClockwise\nDirection2D.rotateCounterclockwise\nDirection2D.perpendicularTo\nDirection2D.mirrorAcross\nDirection2D.orthonormalize\n\n(** # Queries *)\nDirection2D.equalWithin\nDirection2D.componentIn\nDirection2D.angleFrom\n\n(** # Coordinate Conversions *)\nDirection2D.relativeTo\nDirection2D.placeIn"},{"uri":"/fsharp-geometry/circle.html","title":"2D Circle","content":"(**\n\n---\ntitle: 2D Circle\ncategory: 2D Modules\ncategoryindex: 3\nindex: 4\n---\n\n\n*)\n(*** hide ***)\n\n#r \u0022../Geometry/bin/Debug/net6.0/Geometry.dll\u0022\nopen Geometry\ntype Cartesian = Cartesian\n(***)"}]